{"version":3,"sources":["Graph.js","request.js","gist/constants.js","Gist.js","config.js","migrator.js","validator.js","ProjectStore.js","GraphView.js","debounce.js","Button.js","GraphEditPanel.js","Save.js","SavePanel.js","gistSelection.js","SettingsPanel.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["stripTempData","key","value","startsWith","Graph","savedGraphState","_this","this","Object","classCallCheck","_nodeMap","_linkMap","_nextNodeId","_nextLinkId","getImmutableCopy","str","JSON","stringify","parse","addNode","nodeName","newNode","__id","name","__links","x","y","vx","vy","deleteNode","node","findNode","keys","length","Error","addLink","sourceId","targetId","type","arguments","undefined","oldLinks","oldLinkKey","oldLink","newLink","source","target","deleteLink","link","findLink","result","concat","getNodeArray","values","getLinkArray","nodeId","Number","linkId","refillMapIds","refillLinks","request","method","path","headers","data","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","forEach","header","setRequestHeader","send","API_URL","GRAPH_STATE_FILENAME","Gist","token","gistId","_auth","Authorization","_gistId","_files","_description","_public","fileName","fileData","isPublic","description","setDescription","dto","wrapNewFileData","public","response","responseObj","console","error","_context","t0","message","id","_context2","files","filename","content","GRAPH_FORCE_STRENGTH_DEFAULT","GRAPH_FORCE_DISTANCE_DEFAULT","applyMigrations","graph","meta","forceStrength","forceDistance","version","replaceRootSections","validateDataObject","requiredProps","optionalProps","constructor","requiredKeys","i","property","hasOwnProperty","optionalKeys","FORCE","INITIAL_GRAPH_DATA","1","2","ProjectStore","_class","githubToken","initializerDefineProperty","_descriptor","graphData","_descriptor2","_descriptor3","projectGist","_initializeGraph","gistInfo","errorMsg","savedState","savedGraphStateJson","projectName","err","notie","alert","text","isLoaded","_prepareStateForSave","optionalGraphData","appVersion","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","createClass","read","then","stateForSave","stateJson","create","_this2","resultJson","update","savedChangeStamp","changeStamp","targetLinkChoiceInProgress","get","_projectName","set","v","document","title","_activeNode","__focused","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","nsp","width","window","innerWidth","height","innerHeight","updateNode","selection","attr","d","Math","max","min","updateLink","updateGraph","selectAll","call","dragStarted","d3","active","force","alphaTarget","restart","fx","fy","dragging","dragEnded","enterNode","select","style","enterLink","initForce","nodes","links","forceOptions","strength","distance","iterations","initDrag","on","initTick","that","d3Graph","ReactDOM","findDOMNode","GraphView","inject","observer","reInitForce","assertThisInitialized","reInitForceDebounced","fn","delay","timerId","context","args","clearTimeout","setTimeout","apply","debounce","_this$props$projectSt","props","projectStore","prevProps","_this$props$projectSt2","activeNode","map","react_default","a","createElement","GraphView_Node","focused","GraphView_Link","className","viewBox","refX","refY","markerWidth","markerHeight","orient","markerUnits","Component","Link","d3Link","datum","markerEnd","Node","processFocus","d3NodeSelection","isFocused","classed","handleClick","e","sourceNodeId","targetNodeId","currentTarget","dataset","warn","d3Node","onClick","data-node-id","StyledButton","styled","Button","margin","CustomButton","_ref","_ref$size","size","_ref$variant","variant","children","rest","objectWithoutProperties","assign","GraphEditPanel","state","linksHided","focusNodenameInput","nodeNameRef","focus","renderActiveNodeInfo","descriptionContent","Fragment","TextField","label","fullWidth","multiline","onChange","handleChangeNodeName","inputRef","ref","handleChangeDescription","handleCloseEditPanel","targetNode","renderLinks","src_Button","showLinks","items","_loop","sourceNode","push","ListItem","button","ListItemText","ListItemSecondaryAction","IconButton","handleDeleteLink","Delete_default","fontSize","List","subheader","dense","setState","renderDeleteNodeButton","handleDeleteNode","renderNewLinkComponent","handleAbortNewLinkCreation","color","handleNewLinkTargetSelection","renderNewChildButton","handleNewChildCreation","createNewNode","currentNodeId","Close_default","prevState","Save","componentDidMount","addEventListener","handleLeavePage","componentWillUnmount","removeEventListener","handleSave","saveProject","event","warningText","returnValue","SavePanel","handleChangeProjectName","Tooltip","placement","TransitionComponent","Zoom","InfoOutlined_default","placeholder","Save_Save","LOCAL_STORAGE_KEY","requestToken","cb","localStorage","getItem","fieldName","input","inputResult","errMsg","notieInput","setItem","_callee","userGists","regenerator_default","wrap","prev","next","getAllUserGists","sent","abrupt","filter","gist","stop","_callee2","GistSelection","handleSelect","loadProject","handleNewGist","newProject","getSuitableGists","gists","gistElems","SettingsPanel","Slider","defaultValue","c","AppVesion","App","_projectStore","src_GraphView_0","GraphEditPanel_GraphEditPanel","SavePanel_SavePanel","SettingsPanel_SettingsPanel","gistSelection_GistSelection","Boolean","location","hostname","match","initSentry","beforeSend","getAfterErrorSnapshot","release","dsn","stores","render","index_module","src_App_0","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.472e9ccb.chunk.js","sourcesContent":["/**\n * \"_data\" - is a private data\n * \"__data\" - is a temporary data\n */\n\nfunction refillMapIds(savedGraphState) {\n  for (let nodeId in savedGraphState._nodeMap) {\n    let node = savedGraphState._nodeMap[nodeId];\n    node.__id = Number(nodeId);\n  }\n  for (let linkId in savedGraphState._linkMap) {\n    let link = savedGraphState._linkMap[linkId];\n    link.__id = Number(linkId);\n  }\n}\n\nfunction refillLinks(savedGraphState) {\n  for (let nodeId in savedGraphState._nodeMap) {\n    let node = savedGraphState._nodeMap[nodeId];\n    node.__links = {};\n  }\n  for (let linkId in savedGraphState._linkMap) {\n    let link = savedGraphState._linkMap[linkId];\n\n    let sourceNode = savedGraphState._nodeMap[link.sourceId];\n    sourceNode.__links[linkId] = link;\n    let targetNode = savedGraphState._nodeMap[link.targetId];\n    targetNode.__links[linkId] = link;\n\n    // for d3 force links // TODO: maybe extern this code?\n    link.source = link.sourceId;\n    link.target = link.targetId;\n  }\n}\n\nfunction stripTempData(key, value) {\n  // remove temp data\n  if (key.startsWith('__')) return void 0;\n\n  // remove d3 temp data\n  if (key === 'x') return void 0;\n  if (key === 'y') return void 0;\n  if (key === 'vx') return void 0;\n  if (key === 'vy') return void 0;\n  if (key === 'fx') return void 0;\n  if (key === 'fy') return void 0;\n  if (key === 'index') return void 0;\n  if (key === 'source') return void 0;\n  if (key === 'target') return void 0;\n\n  return value;\n}\n\nexport default class Graph {\n  _nodeMap = {};\n  _linkMap = {};\n  _nextNodeId = null;\n  _nextLinkId = null;\n\n  // TODO: add case, when savedGraphState === undefined\n  constructor(savedGraphState) {\n    refillMapIds(savedGraphState);\n    refillLinks(savedGraphState);\n\n    this._nodeMap = savedGraphState._nodeMap;\n    this._linkMap = savedGraphState._linkMap;\n    this._nextNodeId = savedGraphState._nextNodeId;\n    this._nextLinkId = savedGraphState._nextLinkId;\n  }\n\n  getImmutableCopy = () => {\n    const str = JSON.stringify(\n      {\n        _nodeMap: this._nodeMap,\n        _linkMap: this._linkMap,\n        _nextNodeId: this._nextNodeId,\n        _nextLinkId: this._nextLinkId\n      },\n      stripTempData,\n      2\n    );\n    return JSON.parse(str);\n  };\n\n  addNode = nodeName => {\n    let newNode = {\n      __id: this._nextNodeId,\n      name: nodeName,\n      __links: {},\n      // i cannot find where each node datum get vx, vy, x, y from d3js\n      // TODO: u can try to find\n      // so i create it myself here:\n      x: 0,\n      y: 0,\n      vx: 0,\n      vy:0\n    };\n    this._nodeMap[this._nextNodeId] = newNode;\n    this._nextNodeId++;\n    return newNode;\n  };\n\n  deleteNode = node => {\n    node = this.findNode(node);\n    // TODO: delete all links or warn about current links ?\n    // current behavior: warn about current links\n    if (Object.keys(node.__links).length > 0) {\n      throw new Error('Cannot delete node, when node has links');\n    }\n\n    delete this._nodeMap[node.__id];\n  };\n\n  addLink = (sourceId, targetId, type = 'CHILD') => {\n    if (sourceId === targetId)\n      throw new Error('Cannot create link with same sourceId and targetId');\n\n    let oldLinks = this._nodeMap[sourceId].__links;\n    for (let oldLinkKey in oldLinks) {\n      const oldLink = oldLinks[oldLinkKey];\n      if (oldLink.sourceId === sourceId && oldLink.targetId === targetId) {\n        throw new Error('Cannot create duplicate links');\n      }\n    }\n\n    let newLink = {\n      __id: this._nextLinkId,\n      type,\n      sourceId,\n      targetId,\n      // for d3 force links // TODO: maybe extern this code?\n      source: sourceId,\n      target: targetId\n    };\n    this._linkMap[this._nextLinkId] = newLink;\n    this._nodeMap[sourceId].__links[this._nextLinkId] = newLink;\n    this._nodeMap[targetId].__links[this._nextLinkId] = newLink;\n    this._nextLinkId++;\n    return newLink;\n  };\n\n  deleteLink = link => {\n    link = this.findLink(link);\n    delete this._linkMap[link.__id];\n\n    let sourceNode = this._nodeMap[link.sourceId];\n    delete sourceNode.__links[link.__id];\n    let targetNode = this._nodeMap[link.targetId];\n    delete targetNode.__links[link.__id];\n  };\n\n  /**\n   * node - nodeId or node\n   * result - node\n   */\n  findNode = node => {\n    let result;\n    if (typeof node === 'number') {\n      result = this._nodeMap[node];\n    } else {\n      result = node;\n    }\n\n    if (!result) throw new Error(`Cannot find node ${node}`);\n\n    return result;\n  };\n\n  /**\n   * link - linkId or link\n   * result - link\n   */\n  findLink = link => {\n    let result;\n    if (typeof link === 'number') {\n      result = this._linkMap[link];\n    } else {\n      result = link;\n    }\n\n    if (!result) throw new Error(`Cannot find link ${link}`);\n\n    return result;\n  };\n\n  getNodeArray = () => {\n    if (!this._nodeMap) return [];\n\n    return Object.values(this._nodeMap);\n  };\n\n  getLinkArray = () => {\n    if (!this._linkMap) return [];\n\n    return Object.values(this._linkMap);\n  };\n}\n","export default function request(method, path, headers, data) {\n  return new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 201) {\n          resolve(xhr.responseText);\n        } else {\n          reject(new Error(`response failed, status: ${xhr.status}`));\n        }\n      }\n    };\n    xhr.open(method, path, true);\n    if (headers) {\n      Object.keys(headers).forEach(header => {\n        xhr.setRequestHeader(header, headers[header]);\n      });\n    }\n    if (!data) {\n      xhr.send();\n    } else {\n      xhr.send(JSON.stringify(data));\n    }\n  });\n}\n","export const API_URL = 'https://api.github.com/';\nexport const GRAPH_STATE_FILENAME = 'graphState.json';\n","import request from './request';\nimport { API_URL } from './gist/constants';\n\nexport default class Gist {\n  constructor(token, gistId) {\n    if (!token) throw new Error('Token not passed!');\n    this._auth = { Authorization: `token ${token}` };\n    this._gistId = gistId;\n\n    this._files = null;\n    this._description = '';\n    this._public = null;\n  }\n\n  async create(fileName, fileData, isPublic, description) {\n    this.setDescription(description);\n    const dto = this.wrapNewFileData(fileName, fileData);\n    this._public = isPublic;\n    dto.public = isPublic;\n    let response = await request('POST', `${API_URL}gists`, this._auth, dto);\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse: ${e.message}`);\n      throw e;\n    }\n\n    if (!responseObj) throw new Error('Data from response not available');\n\n    this._gistId = responseObj.id;\n    return responseObj;\n  }\n\n  setDescription(description) {\n    this._description = description;\n  }\n\n  async update(fileName, fileData) {\n    const dto = this.wrapNewFileData(fileName, fileData);\n    let response = await request(\n      'PATCH',\n      `${API_URL}gists/${this._gistId}`,\n      this._auth,\n      dto\n    );\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse: ${e.message}`);\n      throw e;\n    }\n\n    if (responseObj.id !== this._gistId)\n      throw new Error(\n        'Gist id from respons does not match the current Gist id'\n      );\n\n    return responseObj;\n  }\n\n  async read() {\n    let response = await request(\n      'GET',\n      `${API_URL}gists/${this._gistId}`,\n      this._auth,\n      null\n    );\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse`);\n      throw e;\n    }\n\n    if (!responseObj) throw new Error('Data from response not available');\n\n    this._description = responseObj.description;\n    this._files = responseObj.files;\n    this._public = responseObj.public;\n\n    return responseObj;\n  }\n\n  wrapNewFileData(\n    fileName,\n    fileData\n  ) {\n    if (!this._files) this._files = {};\n\n    this._files[fileName] = { filename: fileName, content: fileData };\n    return {\n      description: this._description,\n      files: this._files,\n    };\n  }\n}\n","export const GRAPH_FORCE_STRENGTH_DEFAULT = -300;\nexport const GRAPH_FORCE_STRENGTH_MIN = -550;\nexport const GRAPH_FORCE_STRENGTH_MAX = -50;\n\nexport const GRAPH_FORCE_DISTANCE_DEFAULT = 130;\nexport const GRAPH_FORCE_DISTANCE_MIN = 50;\nexport const GRAPH_FORCE_DISTANCE_MAX = 210;\n","import { version } from '../package.json';\nimport {\n  GRAPH_FORCE_STRENGTH_DEFAULT,\n  GRAPH_FORCE_DISTANCE_DEFAULT\n} from './config';\n\nexport default function applyMigrations(savedGraphState) {\n  replaceRootSections(savedGraphState);\n}\n\nfunction replaceRootSections(savedGraphState) {\n  if (!savedGraphState.graph) {\n    savedGraphState.graph = {\n      _nodeMap: savedGraphState._nodeMap,\n      _linkMap: savedGraphState._linkMap,\n      _nextNodeId: savedGraphState._nextNodeId,\n      _nextLinkId: savedGraphState._nextLinkId\n    };\n    delete savedGraphState._nodeMap;\n    delete savedGraphState._linkMap;\n    delete savedGraphState._nextNodeId;\n    delete savedGraphState._nextLinkId;\n  }\n  if (!savedGraphState.meta) {\n    savedGraphState.meta = {\n      forceStrength: GRAPH_FORCE_STRENGTH_DEFAULT,\n      forceDistance: GRAPH_FORCE_DISTANCE_DEFAULT,\n      version\n    };\n  }\n}\n","export default function validateSavedState(savedState) {\n  if (\n    !validateDataObject(savedState.graph, {\n      _nodeMap: 'object',\n      _linkMap: 'object',\n      _nextNodeId: 'number',\n      _nextLinkId: 'number'\n    })\n  )\n    return false;\n\n  if (\n    !validateDataObject(savedState.meta, {\n      forceStrength: 'number',\n      forceDistance: 'number',\n      version: 'string'\n    })\n  )\n    return false;\n\n  return true;\n}\n\nfunction validateDataObject(target, requiredProps, optionalProps) {\n  if (target.constructor !== Object) return false;\n\n  const requiredKeys = Object.keys(requiredProps);\n  for (let i = 0; i < requiredKeys.length; i++) {\n    const property = requiredKeys[i];\n    if (!target.hasOwnProperty(property)) return false;\n\n    if (requiredProps[property] === 'object') {\n      if (target[property].constructor !== Object) return false;\n    } else {\n      if (typeof target[property] !== requiredProps[property]) return false;\n    }\n  }\n\n  if (optionalProps) {\n    const optionalKeys = Object.keys(optionalProps);\n    for (let i = 0; i < optionalKeys.length; i++) {\n      const property = optionalKeys[i];\n      if (target.hasOwnProperty(property)) {\n        if (typeof target[property] !== optionalProps[property]) return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { observable, action } from 'mobx';\nimport { version as appVersion } from '../package.json';\nimport Graph from './Graph';\nimport Gist from './Gist';\nimport { GRAPH_STATE_FILENAME } from './gist/constants';\nimport {\n  GRAPH_FORCE_DISTANCE_DEFAULT,\n  GRAPH_FORCE_STRENGTH_DEFAULT\n} from './config';\nimport applyMigrations from './migrator';\nimport notie from 'notie';\nimport validateSavedState from './validator';\n\nconst INITIAL_GRAPH_DATA = {\n  _nodeMap: {\n    1: { name: 'initial node' },\n    2: { name: 'linked node' }\n  },\n  _linkMap: {\n    1: { type: 'CHILD', sourceId: 1, targetId: 2 }\n  },\n  _nextNodeId: 3,\n  _nextLinkId: 2\n};\n\nexport class ProjectStore {\n  githubToken = null;\n  @observable gists = null;\n\n  graphData = null;\n  @observable isLoaded = false;\n  @observable _projectName = '';\n  get projectName() {\n    return this._projectName;\n  }\n  set projectName(v) {\n    this._projectName = v;\n    this.projectGist.setDescription(v);\n    document.title = v + ' | Graph editor';\n  }\n\n  get isPublic() {\n    return this.projectGist._public;\n  }\n\n  projectGist = null;\n  @action loadProject(gistId) {\n    this.projectGist = new Gist(this.githubToken, gistId);\n    this.projectGist.read().then(this._initializeGraph);\n  }\n\n  @action newProject() {\n    this.projectGist = new Gist(this.githubToken);\n    const stateForSave = this._prepareStateForSave(INITIAL_GRAPH_DATA);\n    const stateJson = JSON.stringify(stateForSave, null, 2);\n    // TODO: add public project creation option\n    this.projectGist\n      .create(GRAPH_STATE_FILENAME, stateJson, false, 'New graph')\n      .then(this._initializeGraph);\n  }\n\n  // TODO: decompose initializeGraph on validate / migrate / initialize\n  _initializeGraph = gistInfo => {\n    let savedGraphStateJson = gistInfo.files[GRAPH_STATE_FILENAME].content;\n    const projectName = gistInfo.description;\n    let errorMsg;\n    let savedGraphState;\n    try {\n      savedGraphState = JSON.parse(savedGraphStateJson);\n      applyMigrations(savedGraphState);\n      if (!validateSavedState(savedGraphState)) {\n        errorMsg = `Project format \"${projectName ||\n          'Untitled'}\" has invalid data format`;\n      }\n    } catch (err) {\n      errorMsg = `Project \"${projectName ||\n        'Untitled'}\" failed to parse / migrate / validate`;\n    }\n\n    if (errorMsg) {\n      notie.alert({ type: 'error', text: errorMsg });\n      return;\n    }\n\n    this.projectName = projectName;\n    this.graphData = new Graph(savedGraphState.graph);\n    this.forceStrength = savedGraphState.meta.forceStrength;\n    this.forceDistance = savedGraphState.meta.forceDistance;\n    this.isLoaded = true;\n  };\n\n  _prepareStateForSave = optionalGraphData => {\n    let graphData = optionalGraphData || this.graphData.getImmutableCopy();\n    return {\n      graph: graphData,\n      meta: {\n        forceStrength: this.forceStrength,\n        forceDistance: this.forceDistance,\n        version: appVersion\n      }\n    };\n  };\n\n  @action saveProject() {\n    let result = this._prepareStateForSave();\n    const resultJson = JSON.stringify(result, null, 2);\n    this.projectGist\n      .update(GRAPH_STATE_FILENAME, resultJson)\n      .then(responseObj => {\n        this.savedChangeStamp = this.changeStamp;\n      });\n  }\n\n  @observable _activeNode = null;\n  get activeNode() {\n    return this._activeNode;\n  }\n  set activeNode(v) {\n    if (this._activeNode) {\n      this.graphData.findNode(this._activeNode).__focused = false;\n    }\n    if (v) {\n      this.graphData.findNode(v).__focused = true;\n    }\n    this._activeNode = v;\n  }\n\n  @observable targetLinkChoiceInProgress = false;\n  @observable changeStamp = 0;\n  @observable savedChangeStamp = 0;\n\n  @observable forceStrength = GRAPH_FORCE_STRENGTH_DEFAULT;\n  @observable forceDistance = GRAPH_FORCE_DISTANCE_DEFAULT;\n\n  getAfterErrorSnapshot() {\n    return {\n      graphData: this.graphData.getImmutableCopy(),\n      forceStrength: this.forceStrength,\n      forceDistance: this.forceDistance,\n      targetLinkChoiceInProgress: this.targetLinkChoiceInProgress,\n      changeStamp: this.changeStamp,\n      savedChangeStamp: this.savedChangeStamp,\n      gistId: this.projectGist._gistId\n    };\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { inject, observer } from 'mobx-react';\nimport * as d3 from 'd3';\nimport './GraphView.css';\nimport debounce from './debounce';\n\n// Functions and variables\nvar FORCE;\nFORCE = (function(nsp) {\n  var width = window.innerWidth,\n    height = window.innerHeight,\n    // TODO: maybe need d3.forceX and d3.forceY instead of d3.forceCenter\n    initForce = (nodes, links, forceOptions) => {\n      const { strength, distance } = forceOptions;\n      nsp.force = d3\n        .forceSimulation(nodes)\n        .force('charge', d3.forceManyBody().strength(strength))\n        .force(\n          'link',\n          d3\n            .forceLink(links)\n            .id(d => d.__id)\n            .distance(distance)\n        )\n        .force(\n          'center',\n          d3\n            .forceCenter()\n            .x(nsp.width / 2)\n            .y(nsp.height / 2)\n        )\n        .force('collide', d3.forceCollide([5]).iterations([5]));\n    },\n    enterNode = selection => {\n      selection\n        .select('circle')\n        .attr('r', 25)\n        .style('fill', 'tomato')\n        .style('stroke', 'bisque')\n        .style('stroke-width', '3px');\n\n      selection\n        .select('text')\n        .style('fill', 'honeydew')\n        .style('font-weight', '600')\n        .style('text-transform', 'uppercase')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'middle')\n        .style('font-size', '10px')\n        .style('font-family', 'cursive');\n    },\n    updateNode = selection => {\n      selection\n        .attr('transform', d => 'translate(' + d.x + ',' + d.y + ')')\n        .attr('cx', d => (d.x = Math.max(30, Math.min(width - 30, d.x))))\n        .attr('cy', d => (d.y = Math.max(30, Math.min(height - 30, d.y))));\n    },\n    enterLink = selection => {\n      selection.attr('stroke-width', 3).attr('stroke', 'bisque');\n    },\n    updateLink = selection => {\n      selection\n        .attr('x1', d => d.source.x)\n        .attr('y1', d => d.source.y)\n        .attr('x2', d => d.target.x)\n        .attr('y2', d => d.target.y);\n    },\n    updateGraph = selection => {\n      selection.selectAll('.node').call(updateNode);\n      selection.selectAll('.link').call(updateLink);\n    },\n    dragStarted = d => {\n      if (!d3.event.active) nsp.force.alphaTarget(0.3).restart();\n\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n    dragging = d => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    },\n    dragEnded = d => {\n      if (!d3.event.active) nsp.force.alphaTarget(0);\n\n      d.fx = null;\n      d.fy = null;\n    },\n    initDrag = () =>\n      d3.selectAll('g.node').call(\n        d3\n          .drag()\n          .on('start', dragStarted)\n          .on('drag', dragging)\n          .on('end', dragEnded)\n      ),\n    initTick = that => {\n      that.d3Graph = d3.select(ReactDOM.findDOMNode(that));\n      nsp.force.on('tick', () => {\n        that.d3Graph.call(updateGraph);\n      });\n    };\n\n  nsp.width = width;\n  nsp.height = height;\n  nsp.enterNode = enterNode;\n  nsp.updateNode = updateNode;\n  nsp.enterLink = enterLink;\n  nsp.updateLink = updateLink;\n  nsp.updateGraph = updateGraph;\n  nsp.initForce = initForce;\n  nsp.dragStarted = dragStarted;\n  nsp.dragging = dragging;\n  nsp.dragEnded = dragEnded;\n  nsp.initDrag = initDrag;\n  nsp.initTick = initTick;\n\n  return nsp;\n})(FORCE || {});\n\n@inject('projectStore')\n@observer\nclass GraphView extends Component {\n  componentDidMount() {\n    const {\n      projectStore: { graphData, forceStrength, forceDistance }\n    } = this.props;\n    this.reInitForce(graphData, {\n      strength: forceStrength,\n      distance: forceDistance\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { graphData } = this.props.projectStore;\n    if (\n      prevProps.changeStamp !== this.props.changeStamp ||\n      prevProps.forceStrength !== this.props.forceStrength ||\n      prevProps.forceDistance !== this.props.forceDistance\n    ) {\n      this.reInitForceDebounced(graphData, {\n        strength: this.props.forceStrength,\n        distance: this.props.forceDistance\n      });\n    }\n  }\n\n  reInitForce = (graphData, forceOptions) => {\n    FORCE.initForce(\n      graphData.getNodeArray(),\n      graphData.getLinkArray(),\n      forceOptions\n    );\n    FORCE.initTick(this);\n    FORCE.initDrag();\n  };\n\n  reInitForceDebounced = debounce(this.reInitForce, 100);\n\n  render() {\n    // activeNode observe for highlightning active node\n    // eslint-disable-next-line no-unused-vars\n    const { graphData, activeNode } = this.props.projectStore;\n    let nodes = graphData.getNodeArray().map(node => {\n      return (\n        <Node\n          key={node.__id}\n          name={node.name}\n          data={node}\n          focused={node.__focused}\n        />\n      );\n    });\n    let links = graphData.getLinkArray().map(link => {\n      return <Link key={link.__id} data={link} />;\n    });\n    return (\n      <div className=\"graph_container\">\n        <svg className=\"graph\" width={FORCE.width} height={FORCE.height}>\n          <defs>\n            <marker\n              id=\"arrow\"\n              viewBox=\"0 0 10 10\"\n              refX=\"26\"\n              refY=\"5\"\n              markerWidth=\"5\"\n              markerHeight=\"5\"\n              orient=\"auto-start-reverse\"\n              markerUnits=\"strokeWidth\"\n            >\n              <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n            </marker>\n          </defs>\n          <g>{links}</g>\n          <g>{nodes}</g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nclass Link extends Component {\n  componentDidMount() {\n    this.d3Link = d3\n      .select(ReactDOM.findDOMNode(this))\n      .datum(this.props.data)\n      .call(FORCE.enterLink);\n  }\n\n  componentDidUpdate() {\n    this.d3Link.datum(this.props.data).call(FORCE.updateLink);\n  }\n\n  render() {\n    return <line className=\"link\" markerEnd=\"url('#arrow')\" />;\n  }\n}\n\n@inject('projectStore')\n@observer\nclass Node extends Component {\n  componentDidMount() {\n    this.d3Node = d3\n      .select(ReactDOM.findDOMNode(this))\n      .datum(this.props.data)\n      .call(FORCE.enterNode)\n      .call(this.processFocus, this.props.focused);\n  }\n\n  componentDidUpdate() {\n    this.d3Node\n      .datum(this.props.data)\n      .call(FORCE.updateNode)\n      .call(this.processFocus, this.props.focused);\n  }\n\n  processFocus = (d3NodeSelection, isFocused) => {\n    d3NodeSelection.select('circle').classed('focused', isFocused);\n  };\n\n  render() {\n    const nodeId = this.props.data.__id;\n    return (\n      <g className=\"node\" onClick={this.handleClick} data-node-id={nodeId}>\n        <circle />\n        <text>{this.props.data.name}</text>\n      </g>\n    );\n  }\n\n  handleClick = e => {\n    const { projectStore } = this.props;\n    if (!projectStore.targetLinkChoiceInProgress) {\n      projectStore.activeNode = Number(e.currentTarget.dataset.nodeId);\n      return;\n    }\n\n    // handle new link creation\n    const sourceNodeId = projectStore.activeNode;\n    const targetNodeId = Number(e.currentTarget.dataset.nodeId);\n    try {\n      projectStore.graphData.addLink(sourceNodeId, targetNodeId, 'CHILD');\n    } catch (e) {\n      console.warn(e.message); // TODO: warn with alertify\n      return;\n    }\n    projectStore.targetLinkChoiceInProgress = false;\n    projectStore.changeStamp++;\n  };\n}\n\nexport default GraphView;\n","export default function debounce(fn, delay) {\n  let timerId;\n  return function() {\n    let context = this;\n    let args = arguments;\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(() => {\n      fn.apply(context, args);\n      timerId = null;\n    }, delay);\n  };\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nconst StyledButton = styled(Button)({\n  margin: '5px'\n});\n\nconst CustomButton = ({\n  size = 'small',\n  variant = 'contained',\n  children,\n  ...rest\n}) => {\n  return (\n    <StyledButton size={size} variant={variant} {...rest}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default CustomButton;\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './GraphEditPanel.css';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Button from './Button';\n\n@inject('projectStore')\n@observer\nclass GraphEditPanel extends Component {\n  state = { activeNode: null, linksHided: false };\n\n  static getDerivedStateFromProps(props, prevState) {\n    const { projectStore } = props;\n    const { activeNode } = projectStore;\n    if (activeNode === prevState.activeNode) return prevState;\n    let node = null;\n    let linksHided = false;\n    if (activeNode) {\n      node = projectStore.graphData.findNode(activeNode);\n      // TODO: extern to configuration\n      linksHided = Object.keys(node.__links).length > 5;\n    }\n    return { activeNode, linksHided };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.activeNode !== this.props.activeNode) {\n      this.focusNodenameInput();\n    }\n  }\n\n  render() {\n    const { projectStore } = this.props;\n    // changeStamp here for observe\n    // eslint-disable-next-line no-unused-vars\n    const { activeNode, changeStamp } = projectStore;\n    let content;\n    if (!activeNode) {\n      content = (\n        <>\n          Click on node to edit\n          <br />\n          or\n          <br />\n          <Button onClick={this.createNewNode}>create new node</Button>\n        </>\n      );\n    } else {\n      const node = projectStore.graphData.findNode(activeNode);\n      content = (\n        <>\n          <div className=\"CloseEditPanelButton\">\n            <IconButton onClick={this.handleCloseEditPanel} size=\"small\">\n              <CloseIcon />\n            </IconButton>\n          </div>\n          {this.renderActiveNodeInfo(node)}\n          <br />\n          {this.renderLinks(node)}\n          {this.renderDeleteNodeButton(node)}\n          {this.renderNewLinkComponent(node)}\n          {this.renderNewChildButton(node)}\n        </>\n      );\n    }\n    return (\n      <div key=\"graphEditPanel\" className=\"graphEditPanel\">\n        {content}\n      </div>\n    );\n  }\n\n  focusNodenameInput = () => {\n    if (this.nodeNameRef) {\n      setTimeout(() => {\n        this.nodeNameRef.focus();\n      }, 100);\n    }\n  };\n\n  renderActiveNodeInfo = node => {\n    const descriptionContent = node.description ? node.description : '';\n    return (\n      <>\n        <TextField\n          label=\"Node Name\"\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={node.name}\n          onChange={e => this.handleChangeNodeName(e, node)}\n          inputRef={ref => { this.nodeNameRef = ref }}\n      />\n        <br />\n        <TextField\n          label=\"Description\"\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={descriptionContent}\n          onChange={e => this.handleChangeDescription(e, node)}\n        />\n        <br />\n        {'Node ID: '}\n        {node.__id}\n        <br />\n      </>\n    );\n  };\n\n  handleCloseEditPanel = () => {\n    const { projectStore } = this.props;\n    projectStore.activeNode = null;\n  }\n\n  handleChangeNodeName = (e, targetNode) => {\n    targetNode.name = e.target.value;\n    this.props.projectStore.changeStamp++;\n  };\n\n  handleChangeDescription = (e, targetNode) => {\n    targetNode.description = e.target.value;\n    this.props.projectStore.changeStamp++;\n  };\n\n  renderLinks = node => {\n    const {\n      projectStore: { graphData }\n    } = this.props;\n    if (this.state.linksHided) {\n      return <Button onClick={this.showLinks}>Show links ...</Button>;\n    }\n    let items = [];\n    for (let linkId in node.__links) {\n      const link = node.__links[linkId];\n      const sourceNode = graphData.findNode(link.sourceId);\n      const targetNode = graphData.findNode(link.targetId);\n      // TODO: draw arrow instead of source / target text\n      items.push(\n        <ListItem key={`item-${linkId}`} button>\n          <ListItemText>\n            <b>source: </b>\n            {sourceNode.__id}: {sourceNode.name}, <b>target: </b>\n            {targetNode.__id}: {targetNode.name}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton onClick={() => this.handleDeleteLink(link)}>\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      );\n    }\n\n    return (\n      <>\n        <span>Links:</span>\n        <List className=\"links-list\" subheader={<li />} dense>\n          {items}\n        </List>\n      </>\n    );\n  };\n\n  showLinks = () => {\n    this.setState({ linksHided: false });\n  };\n\n  renderDeleteNodeButton = node => {\n    if (Object.keys(node.__links).length > 0) return null;\n\n    return (\n      <Button onClick={() => this.handleDeleteNode(node)}>\n        Delete this node\n      </Button>\n    );\n  };\n\n  renderNewLinkComponent = () => {\n    const { projectStore } = this.props;\n    if (!projectStore.targetLinkChoiceInProgress) {\n      return (\n        <div>\n          <Button onClick={this.handleNewLinkTargetSelection}>\n            add new link...\n          </Button>\n          <br />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {'Click on target node to create new link ... '}\n        <Button\n          onClick={this.handleAbortNewLinkCreation}\n          variant=\"outlined\"\n          color=\"secondary\"\n        >\n          cancel\n        </Button>\n      </div>\n    );\n  };\n\n  handleAbortNewLinkCreation = () => {\n    const { projectStore } = this.props;\n    projectStore.targetLinkChoiceInProgress = false;\n  };\n\n  renderNewChildButton = node => {\n    return (\n      <div key=\"newChild\">\n        <Button onClick={() => this.handleNewChildCreation(node.__id)}>\n          add new child...\n        </Button>\n        <br />\n      </div>\n    );\n  };\n\n  handleDeleteNode = node => {\n    const { projectStore } = this.props;\n    projectStore.activeNode = null;\n    projectStore.graphData.deleteNode(node);\n    projectStore.changeStamp++;\n  };\n\n  handleDeleteLink = link => {\n    const { projectStore } = this.props;\n    projectStore.graphData.deleteLink(link);\n    projectStore.changeStamp++;\n  };\n\n  createNewNode = () => {\n    const { projectStore } = this.props;\n    const { graphData } = projectStore;\n    const newNode = graphData.addNode('new node');\n    projectStore.activeNode = newNode.__id;\n    projectStore.changeStamp++;\n  };\n\n  handleNewChildCreation = currentNodeId => {\n    const { projectStore } = this.props;\n    const { graphData } = projectStore;\n    const newNode = graphData.addNode('new child node');\n    graphData.addLink(newNode.__id, currentNodeId, 'CHILD');\n    projectStore.activeNode = newNode.__id;\n    projectStore.changeStamp++;\n  };\n\n  handleNewLinkTargetSelection = () => {\n    const { projectStore } = this.props;\n    projectStore.targetLinkChoiceInProgress = true;\n  };\n}\n\nexport { GraphEditPanel };\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './Save.css';\nimport Button from './Button';\n\n@inject('projectStore')\n@observer\nclass Save extends Component {\n  componentDidMount = () => {\n    window.addEventListener('beforeunload', this.handleLeavePage);\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener('beforeunload', this.handleLeavePage);\n  };\n\n  render() {\n    const { changeStamp, savedChangeStamp } = this.props.projectStore;\n    let content;\n    if (changeStamp > savedChangeStamp) {\n      content = (\n        <>\n          <span className=\"redPoint\">Has unsaved changes</span>\n          <Button onClick={this.handleSave}>Save</Button>\n        </>\n      );\n    } else {\n      content = <span className=\"greenPoint\">Graph saved</span>;\n    }\n\n    return <div className=\"Save\">{content}</div>;\n  }\n\n  handleSave = () => {\n    this.props.projectStore.saveProject();\n  };\n\n  handleLeavePage = event => {\n    const { changeStamp, savedChangeStamp } = this.props.projectStore;\n    if (process.env.NODE_ENV === 'development') return;\n    if (changeStamp === savedChangeStamp) return;\n\n    // for browsers, that not support standard alert-on-exit message\n    const warningText =\n      'Data not saved, sure you want to leave the application?';\n    event.returnValue = warningText;\n    return warningText;\n  };\n}\n\nexport { Save };\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport './SavePanel.css';\nimport { Save } from './Save';\n\n@inject('projectStore')\n@observer\nclass SavePanel extends Component {\n  render() {\n    const { projectStore } = this.props;\n    return (\n      <div className=\"SavePanel\">\n        <Tooltip\n          title=\"You can change graph publicity in gist interface (gist.github.com)\"\n          placement=\"right\"\n          TransitionComponent={Zoom}\n        >\n          <span className=\"ProjectPublicity\">\n            {projectStore.isPublic ? 'Public project ' : 'Private project '}\n            <InfoOutlinedIcon />\n          </span>\n        </Tooltip>\n        <br />\n        <TextField\n          placeholder=\"Graph name\"\n          value={projectStore.projectName}\n          onChange={this.handleChangeProjectName}\n          margin=\"normal\"\n          className=\"GraphNameInput\"\n        />\n        <Save />\n      </div>\n    );\n  }\n\n  handleChangeProjectName = (e) => {\n    this.props.projectStore.projectName = e.target.value;\n    this.props.projectStore.changeStamp++;\n  }\n}\n\nexport { SavePanel };\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport notie from 'notie';\nimport request from './request';\nimport { API_URL, GRAPH_STATE_FILENAME } from './gist/constants';\nimport './GistSelection.css';\n\nconst LOCAL_STORAGE_KEY = 'GITHUB_TOKEN';\n\n// cached\nfunction requestToken(cb) {\n  const githubToken = localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (githubToken) {\n    return cb(null, githubToken);\n  }\n\n  notieInput('token with gist access', (err, githubToken) => {\n    if (err) return cb(err);\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, githubToken);\n    return cb(null, githubToken);\n  });\n}\n\nfunction notieInput(fieldName, cb) {\n  notie.input(\n    {\n      text: `Specify github ${fieldName}`\n    },\n    inputResult => {\n      return cb(null, inputResult);\n    },\n    () => {\n      const errMsg = `Need Specify github ${fieldName} to continue =(`;\n      notie.error({\n        text: errMsg\n      });\n      return cb(new Error(errMsg));\n    }\n  );\n}\n\nasync function getSuitableGists(githubToken) {\n  let userGists = await getAllUserGists(githubToken);\n  return userGists.filter(gist => !!gist.files[GRAPH_STATE_FILENAME]);\n}\n\nasync function getAllUserGists(githubToken) {\n  let response = await request(\n    'GET',\n    `${API_URL}gists`,\n    { Authorization: `token ${githubToken}` },\n    null\n  );\n  let userGists;\n  try {\n    userGists = JSON.parse(response);\n  } catch (e) {\n    console.error(`Retrieved json from gist storage failed to parse`);\n    throw e;\n  }\n\n  if (!userGists) throw new Error('Data from response not available');\n\n  return userGists;\n}\n\n@inject('projectStore')\n@observer\nclass GistSelection extends Component {\n  componentDidMount() {\n    const { projectStore } = this.props;\n    requestToken((err, githubToken) => {\n      if (err) throw err;\n\n      projectStore.githubToken = githubToken;\n      getSuitableGists(githubToken).then(gists => {\n        projectStore.gists = gists;\n      });\n    });\n  }\n\n  render() {\n    const { gists } = this.props.projectStore;\n    if (!gists) {\n      return 'gists loading...';\n    }\n\n    let gistElems = gists.map(gist => (\n      <span\n        key={gist.id}\n        className=\"gistDescription yellow\"\n        onClick={() => this.handleSelect(gist.id)}\n      >\n        {gist.description}\n      </span>\n    ));\n    gistElems.push(\n      <span\n        key=\"new\"\n        className=\"gistDescription blue\"\n        onClick={this.handleNewGist}\n      >\n        create new\n      </span>\n    );\n\n    return (\n      <div className=\"gistSelection\">\n        <span>Choose gist with graph:</span>\n        {gistElems}\n      </div>\n    );\n  }\n\n  handleSelect = gistId => {\n    this.props.projectStore.loadProject(gistId);\n  };\n\n  handleNewGist = () => {\n    this.props.projectStore.newProject();\n  };\n}\n\nexport { GistSelection };\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\n// import Slider from '@material-ui/lab/esm/Slider';\nimport Slider from '@material-ui/core/Slider';\nimport './SettingsPanel.css';\nimport {\n  GRAPH_FORCE_STRENGTH_MIN,\n  GRAPH_FORCE_STRENGTH_MAX,\n  GRAPH_FORCE_DISTANCE_MIN,\n  GRAPH_FORCE_DISTANCE_MAX\n} from './config';\n\n@inject('projectStore')\n@observer\nclass SettingsPanel extends Component {\n  render() {\n    const { projectStore } = this.props;\n    return (\n      <div className=\"settingsPanel\">\n        Strength:\n        <Slider\n          defaultValue={projectStore.forceStrength}\n          value={projectStore.forceStrength}\n          min={GRAPH_FORCE_STRENGTH_MIN}\n          max={GRAPH_FORCE_STRENGTH_MAX}\n          onChange={(c, value) => {\n            projectStore.forceStrength = value;\n            projectStore.changeStamp++;\n          }}\n        />\n        Distance:\n        <Slider\n          defaultValue={projectStore.forceDistance}\n          value={projectStore.forceDistance}\n          min={GRAPH_FORCE_DISTANCE_MIN}\n          max={GRAPH_FORCE_DISTANCE_MAX}\n          onChange={(c, value) => {\n            projectStore.forceDistance = value;\n            projectStore.changeStamp++;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport { SettingsPanel };\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './App.css';\nimport GraphView from './GraphView';\nimport { GraphEditPanel } from './GraphEditPanel';\nimport { SavePanel } from './SavePanel';\nimport { GistSelection } from './gistSelection';\nimport { SettingsPanel } from './SettingsPanel';\nimport { version } from '../package.json';\n\nfunction AppVesion(props: any) {\n  return <div className=\"app-version\">Version: {props.version}</div>;\n}\n\n@inject('projectStore')\n@observer\nclass App extends Component {\n  render() {\n    const {\n      graphData, changeStamp, forceStrength, forceDistance, activeNode, isLoaded\n    } = (this.props as any).projectStore;\n    let content;\n    if (!graphData) {\n      content = (\n        <>\n          <GistSelection />\n          <AppVesion version={version} />\n        </>\n      );\n    } else {\n      content = (\n        <>\n          <GraphView\n            changeStamp={changeStamp}\n            forceStrength={forceStrength}\n            forceDistance={forceDistance}\n          />\n          <GraphEditPanel activeNode={activeNode} />\n          <SavePanel />\n          <SettingsPanel />\n          <AppVesion version={version}/>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { init as initSentry } from '@sentry/browser';\nimport { version } from '../package.json';\nimport { ProjectStore } from './ProjectStore';\nimport './index.css';\nimport '@material-ui/core';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV !== 'development') {\n  initSentry({\n    beforeSend: function (event) {\n      // TODO: message ok for sending state ?\n      event.message = JSON.stringify(projectStore.getAfterErrorSnapshot());\n      return event;\n    },\n    release: version,\n    dsn: 'https://504d6ec417994bf7b7f559ffcdc5afab@sentry.io/1527022'\n  });\n}\n\nconst projectStore = new ProjectStore();\nconst stores = {\n  projectStore,\n};\n\n// For easier debugging\nif (process.env.NODE_ENV !== 'production') {\n  (window as any)._____APP_STATE_____ = stores;\n}\n\nReactDOM.render(\n  <Provider { ...stores }>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}