{"version":3,"sources":["Graph.js","request.js","gist/constants.js","GraphView.js","Gist.js","ProjectStore.js","GraphEditPanel.js","SaveInterface.js","gistSelection.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultReplacer","key","value","startsWith","stripTempData","Graph","savedGraphStateJson","_this","this","Object","classCallCheck","_nodeMap","_linkMap","_nextNodeId","_nextLinkId","toString","stringifyReplacer","arguments","length","undefined","JSON","stringify","addNode","nodeName","newNode","__id","name","__links","deleteNode","node","findNode","keys","Error","addLink","sourceId","targetId","type","oldLinks","oldLinkKey","oldLink","newLink","source","target","deleteLink","link","findLink","result","concat","getNodeArray","values","getLinkArray","savedGraphState","parse","nodeId","Number","linkId","refillMapIds","refillLinks","request","method","path","headers","data","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","forEach","header","setRequestHeader","send","FORCE","API_URL","GRAPH_STATE_FILENAME","Gist","token","gistId","_auth","Authorization","_gistId","_files","_description","_public","fileName","fileData","isPublic","description","dto","wrapNewFileData","response","responseObj","console","error","_context","t0","message","id","_context2","files","public","filename","content","INITIAL_GRAPH_DATA","1","2","ProjectStore","_class","githubToken","initializerDefineProperty","_descriptor","graphData","_descriptor2","projectGist","initializeGraph","gistInfo","isLoaded","_descriptor3","_descriptor4","_descriptor5","_descriptor6","createClass","read","then","create","newSavedGraphState","update","savedChangeStamp","changeStamp","get","_activeNode","set","v","__focused","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","nsp","width","window","innerWidth","height","innerHeight","updateNode","selection","attr","d","x","y","Math","max","min","updateLink","updateGraph","selectAll","call","dragStarted","d3","active","force","alphaTarget","restart","fx","fy","dragging","dragEnded","enterNode","select","style","enterLink","initForce","nodes","links","strength","distance","iterations","initDrag","on","initTick","that","d3Graph","ReactDOM","findDOMNode","GraphView","inject","observer","props","projectStore","prevProps","_this$props$projectSt","activeNode","map","react_default","a","createElement","GraphView_Node","focused","GraphView_Link","className","viewBox","refX","refY","markerWidth","markerHeight","orient","markerUnits","Component","Link","d3Link","datum","markerEnd","Node","processFocus","d3NodeSelection","isFocused","classed","handleClick","e","targetLinkChoiceInProgress","sourceNodeId","targetNodeId","currentTarget","dataset","warn","d3Node","onClick","data-node-id","GraphEditPanel","state","linksHided","renderActiveNodeInfo","descriptionContent","Fragment","onChange","handleChangeNodeName","handleChangeDescription","targetNode","renderLinks","elems","push","showLinks","_loop","sourceNode","handleDeleteLink","setState","renderDeleteNodeButton","handleDeleteNode","renderNewLinkComponent","handleAbortNewLinkCreation","handleNewLinkTargetSelection","renderNewChildButton","handleNewChildCreation","createNewNode","currentNodeId","prevState","SaveInterface","handleSave","saveProject","LOCAL_STORAGE_KEY","requestToken","cb","localStorage","getItem","fieldName","notie","input","text","inputResult","errMsg","notieInput","err","setItem","_callee","userGists","regenerator_default","wrap","prev","next","getAllUserGists","sent","abrupt","filter","gist","stop","_callee2","GistSelection","handleSelect","loadProject","handleNewGist","newProject","getSuitableGists","gists","_this2","gistElems","App","_projectStore","src_GraphView_0","GraphEditPanel_GraphEditPanel","src_SaveInterface_0","gistSelection_GistSelection","Boolean","location","hostname","match","stores","render","index_module","src_App_0","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.090a7544.chunk.js","sourcesContent":["function refillMapIds(savedGraphState) {\n  for (let nodeId in savedGraphState._nodeMap) {\n    let node = savedGraphState._nodeMap[nodeId];\n    node.__id = Number(nodeId);\n  }\n  for (let linkId in savedGraphState._linkMap) {\n    let link = savedGraphState._linkMap[linkId];\n    link.__id = Number(linkId);\n  }\n}\n\nfunction refillLinks(savedGraphState) {\n  for (let nodeId in savedGraphState._nodeMap) {\n    let node = savedGraphState._nodeMap[nodeId];\n    node.__links = {};\n  }\n  for (let linkId in savedGraphState._linkMap) {\n    let link = savedGraphState._linkMap[linkId];\n\n    let sourceNode = savedGraphState._nodeMap[link.sourceId];\n    sourceNode.__links[linkId] = link;\n    let targetNode = savedGraphState._nodeMap[link.targetId];\n    targetNode.__links[linkId] = link;\n\n    // for d3 force links // TODO: maybe extern this code?\n    link.source = link.sourceId;\n    link.target = link.targetId;\n  }\n}\n\nfunction stripTempData(key, value) {\n  // remove temp data\n  if (key.startsWith('__')) return void 0;\n\n  // remove d3 temp data\n  if (key === 'x') return void 0;\n  if (key === 'y') return void 0;\n  if (key === 'vx') return void 0;\n  if (key === 'vy') return void 0;\n  if (key === 'fx') return void 0;\n  if (key === 'fy') return void 0;\n  if (key === 'index') return void 0;\n  if (key === 'source') return void 0;\n  if (key === 'target') return void 0;\n\n  return value;\n}\n\nfunction defaultReplacer(key, value) {\n  return stripTempData(key, value);\n}\n\nexport default class Graph {\n  _nodeMap = {};\n  _linkMap = {};\n  _nextNodeId = null;\n  _nextLinkId = null;\n\n  // TODO: add case, when savedGraphState === undefined\n  constructor(savedGraphStateJson) {\n    let savedGraphState = JSON.parse(savedGraphStateJson);\n    refillMapIds(savedGraphState);\n    refillLinks(savedGraphState);\n\n    this._nodeMap = savedGraphState._nodeMap;\n    this._linkMap = savedGraphState._linkMap;\n    this._nextNodeId = savedGraphState._nextNodeId;\n    this._nextLinkId = savedGraphState._nextLinkId;\n  }\n\n  toString = (stringifyReplacer = defaultReplacer) => {\n    return JSON.stringify(\n      {\n        _nodeMap: this._nodeMap,\n        _linkMap: this._linkMap,\n        _nextNodeId: this._nextNodeId,\n        _nextLinkId: this._nextLinkId\n      },\n      stringifyReplacer,\n      2\n    );\n  }\n\n  addNode = (nodeName) => {\n    let newNode = {\n      __id: this._nextNodeId,\n      name: nodeName,\n      __links: {}\n    }\n    this._nodeMap[this._nextNodeId] = newNode;\n    this._nextNodeId++;\n    return newNode;\n  }\n\n  deleteNode = (node) => {\n    node = this.findNode(node);\n    // TODO: delete all links or warn about current links ?\n    // current behavior: warn about current links\n    if (Object.keys(node.__links).length > 0) {\n      throw new Error('Cannot delete node, when node has links');\n    }\n\n    delete this._nodeMap[node.__id];\n  }\n\n  addLink = (sourceId, targetId, type = 'CHILD') => {\n    if (sourceId === targetId)\n      throw new Error('Cannot create link with same sourceId and targetId');\n\n    let oldLinks = this._nodeMap[sourceId].__links;\n    for (let oldLinkKey in oldLinks) {\n      const oldLink = oldLinks[oldLinkKey];\n      if (oldLink.sourceId === sourceId && oldLink.targetId === targetId) {\n        throw new Error('Cannot create duplicate links');\n      }\n    }\n\n    let newLink = {\n      __id: this._nextLinkId,\n      type,\n      sourceId,\n      targetId,\n      // for d3 force links // TODO: maybe extern this code?\n      source: sourceId,\n      target: targetId\n    };\n    this._linkMap[this._nextLinkId] = newLink;\n    this._nodeMap[sourceId].__links[this._nextLinkId] = newLink;\n    this._nodeMap[targetId].__links[this._nextLinkId] = newLink;\n    this._nextLinkId++;\n    return newLink;\n  }\n\n  deleteLink = (link) => {\n    link = this.findLink(link);\n    delete this._linkMap[link.__id];\n\n    let sourceNode = this._nodeMap[link.sourceId];\n    delete sourceNode.__links[link.__id];\n    let targetNode = this._nodeMap[link.targetId];\n    delete targetNode.__links[link.__id];\n  }\n\n  /**\n   * node - nodeId or node\n   * result - node\n   */\n  findNode = (node) => {\n    let result;\n    if (typeof node === 'number') {\n      result = this._nodeMap[node];\n    } else {\n      result = node;\n    }\n\n    if (!result) throw new Error(`Cannot find node ${node}`);\n\n    return result;\n  }\n\n  /**\n   * link - linkId or link\n   * result - link\n   */\n  findLink = (link) => {\n    let result;\n    if (typeof link === 'number') {\n      result = this._linkMap[link];\n    } else {\n      result = link;\n    }\n\n    if (!result) throw new Error(`Cannot find link ${link}`);\n\n    return result;\n  }\n\n  getNodeArray = () => {\n    if (!this._nodeMap) return [];\n\n    return Object.values(this._nodeMap);\n  }\n\n  getLinkArray = () => {\n    if (!this._linkMap) return [];\n\n    return Object.values(this._linkMap);\n  }\n}\n","export default function request(method, path, headers, data) {\n  return new Promise((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200 || xhr.status === 201) {\n          resolve(xhr.responseText);\n        } else {\n          reject(new Error(`response failed, status: ${xhr.status}`));\n        }\n      }\n    };\n    xhr.open(method, path, true);\n    if (headers) {\n      Object.keys(headers).forEach(header => {\n        xhr.setRequestHeader(header, headers[header]);\n      });\n    }\n    if (!data) {\n      xhr.send();\n    } else {\n      xhr.send(JSON.stringify(data));\n    }\n  });\n}\n","export const API_URL = 'https://api.github.com/';\nexport const GRAPH_STATE_FILENAME = 'graphState.json';\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { inject, observer } from 'mobx-react';\nimport * as d3 from 'd3';\nimport './GraphView.css';\n\n// Functions and variables\nvar FORCE;\nFORCE = (function (nsp) {\n  var\n    width = window.innerWidth,\n    height = window.innerHeight,\n\n    // TODO: maybe need d3.forceX and d3.forceY instead of d3.forceCenter\n    initForce = (nodes, links) => {\n      nsp.force = d3.forceSimulation(nodes)\n        .force('charge', d3.forceManyBody().strength(-300))\n        .force('link', d3.forceLink(links).id(d => d.__id).distance(130))\n        .force('center', d3.forceCenter().x(nsp.width / 2).y(nsp.height / 2))\n        .force('collide', d3.forceCollide([5]).iterations([5]));\n    },\n\n    enterNode = (selection) => {\n      selection.select('circle')\n        .attr('r', 25)\n        .style('fill', 'tomato')\n        .style('stroke', 'bisque')\n        .style('stroke-width', '3px');\n\n      selection.select('text')\n        .style('fill', 'honeydew')\n        .style('font-weight', '600')\n        .style('text-transform', 'uppercase')\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'middle')\n        .style('font-size', '10px')\n        .style('font-family', 'cursive');\n    },\n\n    updateNode = (selection) => {\n      selection\n        .attr('transform', (d) => 'translate(' + d.x + ',' + d.y + ')')\n        .attr('cx', d => (d.x = Math.max(30, Math.min(width - 30, d.x))))\n        .attr('cy', d => (d.y = Math.max(30, Math.min(height - 30, d.y))));\n    },\n\n    enterLink = (selection) => {\n      selection\n        .attr('stroke-width', 3)\n        .attr('stroke', 'bisque');\n    },\n\n    updateLink = (selection) => {\n      selection\n        .attr('x1', (d) => d.source.x)\n        .attr('y1', (d) => d.source.y)\n        .attr('x2', (d) => d.target.x)\n        .attr('y2', (d) => d.target.y);\n    },\n\n    updateGraph = (selection) => {\n      selection.selectAll('.node')\n        .call(updateNode);\n      selection.selectAll('.link')\n        .call(updateLink);\n    },\n\n    dragStarted = (d) => {\n      if (!d3.event.active) nsp.force.alphaTarget(0.3).restart();\n\n      d.fx = d.x;\n      d.fy = d.y;\n    },\n\n    dragging = (d) => {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    },\n\n    dragEnded = (d) => {\n      if (!d3.event.active) nsp.force.alphaTarget(0);\n\n      d.fx = null;\n      d.fy = null;\n    },\n\n    initDrag = () => d3.selectAll('g.node')\n      .call(\n        d3.drag()\n          .on('start', dragStarted)\n          .on('drag', dragging)\n          .on('end', dragEnded)\n      ),\n\n    initTick = (that) => {\n      that.d3Graph = d3.select(ReactDOM.findDOMNode(that));\n      nsp.force.on('tick', () => {\n        that.d3Graph.call(updateGraph);\n      });\n    };\n\n  nsp.width = width;\n  nsp.height = height;\n  nsp.enterNode = enterNode;\n  nsp.updateNode = updateNode;\n  nsp.enterLink = enterLink;\n  nsp.updateLink = updateLink;\n  nsp.updateGraph = updateGraph;\n  nsp.initForce = initForce;\n  nsp.dragStarted = dragStarted;\n  nsp.dragging = dragging;\n  nsp.dragEnded = dragEnded;\n  nsp.initDrag = initDrag;\n  nsp.initTick = initTick;\n\n  return nsp;\n\n})(FORCE || {})\n\n@inject('projectStore')\n@observer\nclass GraphView extends Component {\n  componentDidMount() {\n    const { graphData } = this.props.projectStore;\n    FORCE.initForce(\n      graphData.getNodeArray(),\n      graphData.getLinkArray()\n    );\n    FORCE.initTick(this);\n    FORCE.initDrag();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { graphData } = this.props.projectStore;\n    if (prevProps.changeStamp !== this.props.changeStamp) {\n      FORCE.initForce(\n        graphData.getNodeArray(),\n        graphData.getLinkArray()\n      );\n      FORCE.initTick(this);\n      FORCE.initDrag();\n    }\n  }\n\n  render() {\n    // activeNode here for observe\n    // eslint-disable-next-line no-unused-vars\n    const { graphData, activeNode } = this.props.projectStore;\n    let nodes = graphData.getNodeArray().map(node => {\n      return (\n        <Node\n          key={node.__id}\n          name={node.name}\n          data={node}\n          focused={node.__focused}\n        />\n      );\n    });\n    let links = graphData.getLinkArray().map(link => {\n      return (\n        <Link\n          key={link.__id}\n          data={link}\n        />\n      );\n    });\n    return (\n      <div className=\"graph_container\">\n        <svg className=\"graph\" width={FORCE.width} height={FORCE.height}>\n          <defs>\n            <marker id=\"arrow\" viewBox=\"0 0 10 10\" refX=\"26\" refY=\"5\"\n              markerWidth=\"5\" markerHeight=\"5\"\n              orient=\"auto-start-reverse\"\n              markerUnits=\"strokeWidth\">\n              <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n            </marker>\n          </defs>\n          <g>\n            {links}\n          </g>\n          <g>\n            {nodes}\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n\nclass Link extends Component {\n  componentDidMount() {\n    this.d3Link = d3.select(ReactDOM.findDOMNode(this))\n      .datum(this.props.data)\n      .call(FORCE.enterLink);\n  }\n\n  componentDidUpdate() {\n    this.d3Link.datum(this.props.data)\n      .call(FORCE.updateLink);\n  }\n\n  render() {\n    return (\n      <line className=\"link\" markerEnd=\"url('#arrow')\" />\n    );\n  }\n}\n\n@inject('projectStore')\n@observer\nclass Node extends Component {\n  componentDidMount() {\n    this.d3Node = d3.select(ReactDOM.findDOMNode(this))\n      .datum(this.props.data)\n      .call(FORCE.enterNode)\n      .call(this.processFocus, this.props.focused);\n  }\n\n  componentDidUpdate() {\n    this.d3Node.datum(this.props.data)\n      .call(FORCE.updateNode)\n      .call(this.processFocus, this.props.focused);\n  }\n\n  processFocus = (d3NodeSelection, isFocused) => {\n    d3NodeSelection.select('circle')\n      .classed('focused', isFocused);\n  }\n\n  render() {\n    const nodeId = this.props.data.__id;\n    return (\n      <g\n        className=\"node\"\n        onClick={this.handleClick}\n        data-node-id={nodeId}\n      >\n        <circle />\n        <text>{this.props.data.name}</text>\n      </g>\n    );\n  }\n\n  handleClick = (e) => {\n    const { projectStore } = this.props;\n    if (!projectStore.targetLinkChoiceInProgress) {\n      projectStore.activeNode = Number(e.currentTarget.dataset.nodeId);\n      return;\n    }\n\n    // handle new link creation\n    const sourceNodeId = projectStore.activeNode;\n    const targetNodeId = Number(e.currentTarget.dataset.nodeId);\n    try {\n      projectStore.graphData.addLink(sourceNodeId, targetNodeId, 'CHILD');\n    } catch (e) {\n      console.warn(e.message); // TODO: warn with alertify\n      return;\n    }\n    projectStore.targetLinkChoiceInProgress = false;\n    projectStore.changeStamp++;\n  }\n}\n\nexport default GraphView;\n","import request from './request';\nimport { API_URL } from './gist/constants';\n\nexport default class Gist {\n  constructor(token, gistId) {\n    if (!token) throw new Error('Token not passed!');\n    this._auth = { Authorization: `token ${token}` };\n    this._gistId = gistId;\n\n    this._files = null;\n    this._description = null;\n    this._public = null;\n  }\n\n  async create(fileName, fileData, isPublic, description) {\n    const dto = this.wrapNewFileData(fileName, fileData, isPublic, description);\n    let response = await request('POST', `${API_URL}gists`, this._auth, dto);\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse: ${e.message}`);\n      throw e;\n    }\n\n    if (!responseObj) throw new Error('Data from response not available');\n\n    this._gistId = responseObj.id;\n    return responseObj;\n  }\n\n  async update(fileName, fileData, isPublic, description) {\n    const dto = this.wrapNewFileData(fileName, fileData, isPublic, description);\n    let response = await request('PATCH', `${API_URL}gists/${this._gistId}`, this._auth, dto);\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse: ${e.message}`);\n      throw e;\n    }\n\n    if (responseObj.id !== this._gistId)\n      throw new Error(\n        'Gist id from respons does not match the current Gist id'\n      );\n\n    return responseObj;\n  }\n\n  async read() {\n    let response = await request('GET', `${API_URL}gists/${this._gistId}`, this._auth, null);\n    let responseObj;\n    try {\n      responseObj = JSON.parse(response);\n    } catch (e) {\n      console.error(`Retrieved json from gist failed to parse`);\n      throw e;\n    }\n\n    if (!responseObj) throw new Error('Data from response not available');\n\n    this._description = responseObj.description;\n    this._files = responseObj.files;\n    this._public = responseObj.public;\n\n    return responseObj;\n  }\n\n  wrapNewFileData(fileName, fileData, isPublic = this._public, description = this._description) {\n    if (!this._files) this._files = {};\n\n    this._files[fileName] = { filename: fileName, content: fileData };\n    return {\n      description,\n      files: this._files,\n      public: isPublic\n    }\n  }\n}\n","import { observable, action } from 'mobx';\nimport Graph from './Graph';\nimport Gist from './Gist';\nimport { GRAPH_STATE_FILENAME } from './gist/constants';\n\nconst INITIAL_GRAPH_DATA = JSON.stringify({\n  _nodeMap: {\n    1: { name: 'initial node' },\n    2: { name: 'linked node' }\n  },\n  _linkMap: {\n    1: { type: 'CHILD', sourceId: 1, targetId: 2 }\n  },\n  _nextNodeId: 3,\n  _nextLinkId: 2\n}, null, 2);\n\nexport class ProjectStore {\n  githubToken = null;\n  @observable gists = null;\n\n  graphData = null;\n  @observable isLoaded = false;\n\n  projectGist = null;\n  @action loadProject(gistId) {\n    this.projectGist = new Gist(this.githubToken, gistId);\n    this.projectGist.read()\n      .then(this.initializeGraph);\n  }\n\n  @action newProject() {\n    this.projectGist = new Gist(this.githubToken);\n    this.projectGist\n      .create('graphState.json', INITIAL_GRAPH_DATA, false, 'new graph')\n      .then(this.initializeGraph);\n  }\n\n  initializeGraph = (gistInfo) => {\n    let savedGraphState = gistInfo.files[GRAPH_STATE_FILENAME].content;\n\n    // TODO: need validate saved graph state ?\n\n    this.graphData = new Graph(savedGraphState);\n    this.isLoaded = true;\n  }\n\n  @action saveProject() {\n    const newSavedGraphState = this.graphData.toString();\n    this.projectGist.update(GRAPH_STATE_FILENAME, newSavedGraphState);\n    this.savedChangeStamp = this.changeStamp;\n  }\n\n  @observable _activeNode = null;\n  get activeNode() {\n    return this._activeNode;\n  }\n  set activeNode(v) {\n    if (this._activeNode) {\n      this.graphData.findNode(this._activeNode).__focused = false;\n    }\n    if (v) {\n      this.graphData.findNode(v).__focused = true;\n    }\n    this._activeNode = v;\n  }\n\n  @observable targetLinkChoiceInProgress = false;\n  @observable changeStamp = 0;\n  @observable savedChangeStamp = 0;\n}\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './GraphEditPanel.css';\n\n@inject('projectStore')\n@observer\nclass GraphEditPanel extends Component {\n  state = { activeNode: null, linksHided: false };\n\n  static getDerivedStateFromProps(props, prevState) {\n    const { projectStore } = props;\n    const { activeNode } = projectStore;\n    if (activeNode === prevState.activeNode) return prevState;\n    let node = null;\n    let linksHided = false;\n    if (activeNode) {\n      node = projectStore.graphData.findNode(activeNode);\n      linksHided = Object.keys(node.__links).length > 8;\n    }\n    return { activeNode, linksHided };\n  }\n\n  render() {\n    const { projectStore } = this.props;\n    // changeStamp here for observe\n    // eslint-disable-next-line no-unused-vars\n    const { activeNode, changeStamp } = projectStore;\n    let content;\n    if (!activeNode) {\n      content = (\n        <>\n          Click on node to edit\n          <br/>or\n          <br/>\n          <button onClick={this.createNewNode}>create new node</button>\n        </>\n      );\n    } else {\n      const node = projectStore.graphData.findNode(activeNode);\n      content = (\n        <>\n          {this.renderActiveNodeInfo(node)}\n          <br />\n          {this.renderLinks(node)}\n          {this.renderDeleteNodeButton(node)}\n          {this.renderNewLinkComponent(node)}\n          {this.renderNewChildButton(node)}\n        </>\n      );\n    }\n    return (\n      <div key=\"graphEditPanel\" className=\"graphEditPanel\">\n        {content}\n      </div>\n    );\n  }\n\n  renderActiveNodeInfo = (node) => {\n    const descriptionContent = node.description ? node.description : '';\n    return (\n      <>\n        Name:\n          <input\n          className=\"input-res\"\n          type=\"text\"\n          value={node.name}\n          onChange={e => this.handleChangeNodeName(e, node)}\n        />\n        <br />\n        Description:\n          <input\n          className=\"input-res\"\n          type=\"text\"\n          value={descriptionContent}\n          onChange={e => this.handleChangeDescription(e, node)}\n        />\n        <br />\n        {'Node ID: '}\n        {node.__id}\n        <br />\n      </>\n    );\n  }\n\n  handleChangeNodeName = (e, targetNode) => {\n    targetNode.name = e.target.value;\n    this.props.projectStore.changeStamp++;\n  }\n\n  handleChangeDescription = (e, targetNode) => {\n    targetNode.description = e.target.value;\n    this.props.projectStore.changeStamp++;\n  }\n\n  renderLinks = (node) => {\n    const { projectStore: { graphData } } = this.props;\n    let elems = [<span key={0}>Links:</span>];\n    if (this.state.linksHided) {\n      elems.push(\n        <button key=\"showLinks\" onClick={this.showLinks}>...</button>\n      );\n    } else {\n      elems.push(<br key=\"separator\" />);\n      for (let linkId in node.__links) {\n        const link = node.__links[linkId];\n        const sourceNode = graphData.findNode(link.sourceId);\n        const targetNode = graphData.findNode(link.targetId);\n        // TODO: draw arrow instead of source / target text\n        elems.push(\n          <div key={linkId}>\n            <b>source: </b>{sourceNode.__id}: {sourceNode.name},\n          {' '}\n            <b>target: </b>{targetNode.__id}: {targetNode.name}\n            <button onClick={() => this.handleDeleteLink(link)}>delete</button>\n            <br />\n          </div>\n        );\n      }\n    }\n\n    return elems;\n  }\n\n  showLinks = () => {\n    this.setState({ linksHided: false });\n  }\n\n  renderDeleteNodeButton = (node) => {\n    if (Object.keys(node.__links).length > 0) return null;\n\n    return (\n      <button onClick={() => this.handleDeleteNode(node)}>Delete this node</button>\n    );\n  }\n\n  renderNewLinkComponent = () => {\n    const { projectStore } = this.props;\n    if (!projectStore.targetLinkChoiceInProgress) {\n      return (\n        <div>\n          <button key=\"newLink\" onClick={this.handleNewLinkTargetSelection}>add new link...</button>\n          <br/>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {'Click on target node to create new link ...'}\n        <button onClick={this.handleAbortNewLinkCreation}>cancel</button>\n      </div>\n    );\n  }\n\n  handleAbortNewLinkCreation = () => {\n    const { projectStore } = this.props;\n    projectStore.targetLinkChoiceInProgress = false;\n  }\n\n  renderNewChildButton = (node) => {\n    return (\n      <div key=\"newChild\">\n        <button\n          onClick={() => this.handleNewChildCreation(node.__id)}\n        >\n          add new child...\n        </button>\n        <br />\n      </div>\n    );\n  }\n\n  handleDeleteNode = (node) => {\n    const { projectStore } = this.props;\n    projectStore.activeNode = null;\n    projectStore.graphData.deleteNode(node);\n    projectStore.changeStamp++;\n  }\n\n  handleDeleteLink = (link) => {\n    const { projectStore } = this.props;\n    projectStore.graphData.deleteLink(link);\n    projectStore.changeStamp++;\n  }\n\n  createNewNode = () => {\n    const { projectStore } = this.props;\n    const { graphData } = projectStore;\n    const newNode = graphData.addNode('new node');\n    projectStore.activeNode = newNode.__id;\n    projectStore.changeStamp++;\n  }\n\n  handleNewChildCreation = (currentNodeId) => {\n    const { projectStore } = this.props;\n    const { graphData } = projectStore;\n    const newNode = graphData.addNode('new child node');\n    graphData.addLink(newNode.__id, currentNodeId, 'CHILD');\n    projectStore.activeNode = newNode.__id;\n    projectStore.changeStamp++;\n  }\n\n  handleNewLinkTargetSelection = () => {\n    const { projectStore } = this.props;\n    projectStore.targetLinkChoiceInProgress = true;\n  }\n}\n\nexport { GraphEditPanel }\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './SaveInterface.css';\n\n@inject('projectStore')\n@observer\nclass SaveInterface extends Component {\n  render() {\n    const { changeStamp, savedChangeStamp } = this.props.projectStore;\n    let content;\n    if (changeStamp > savedChangeStamp) {\n      content = (\n        <>\n          <span className=\"redPoint\">Has unsaved changes</span>\n          <button className=\"saveButton\" onClick={this.handleSave}>Save</button>\n        </>\n      );\n    } else {\n      content = <span className=\"greenPoint\">Graph saved</span>;\n    }\n\n    return <div className=\"saveInterface\">\n      {content}\n    </div>\n  }\n\n  handleSave = () => {\n    this.props.projectStore.saveProject();\n  }\n}\n\nexport default SaveInterface;\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport notie from 'notie';\nimport request from './request';\nimport { API_URL, GRAPH_STATE_FILENAME } from './gist/constants';\nimport './GistSelection.css';\n\nconst LOCAL_STORAGE_KEY = 'GITHUB_TOKEN';\n\n// cached\nfunction requestToken(cb) {\n  const githubToken = localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (githubToken) {\n    return cb(null, githubToken);\n  }\n\n  notieInput('token with gist access', (err, githubToken) => {\n    if (err) return cb(err);\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, githubToken);\n    return cb(null, githubToken);\n  });\n}\n\nfunction notieInput(fieldName, cb) {\n  notie.input({\n    text: `Specify github ${fieldName}`\n  }, inputResult => {\n    return cb(null, inputResult);\n  }, () => {\n    const errMsg = `Need Specify github ${fieldName} to continue =(`;\n    notie.error({\n      text: errMsg\n    });\n    return cb(new Error(errMsg));\n  });\n}\n\nasync function getSuitableGists(githubToken) {\n  let userGists = await getAllUserGists(githubToken);\n  return userGists.filter(gist => !!gist.files[GRAPH_STATE_FILENAME]);\n}\n\nasync function getAllUserGists(githubToken) {\n  let response = await request('GET', `${API_URL}gists`, { Authorization: `token ${githubToken}` }, null);\n  let userGists;\n  try {\n    userGists = JSON.parse(response);\n  } catch (e) {\n    console.error(`Retrieved json from gist storage failed to parse`);\n    throw e;\n  }\n\n  if (!userGists) throw new Error('Data from response not available');\n\n  return userGists;\n}\n\n@inject('projectStore')\n@observer\nclass GistSelection extends Component {\n  componentDidMount() {\n    const { projectStore } = this.props;\n    requestToken((err, githubToken) => {\n      if (err) throw err;\n\n      projectStore.githubToken = githubToken;\n      getSuitableGists(githubToken)\n        .then(gists => {\n          projectStore.gists = gists;\n        });\n    });\n  }\n\n  render() {\n    const { gists } = this.props.projectStore;\n    if (!gists) {\n      return 'gists loading...';\n    }\n\n    let gistElems = gists.map(gist => (\n      <span\n        key={gist.id}\n        className=\"gistDescription yellow\"\n        onClick={() => this.handleSelect(gist.id)}\n      >\n        {gist.description}\n      </span>\n    ));\n    gistElems.push(\n      <span\n        key=\"new\"\n        className=\"gistDescription blue\"\n        onClick={this.handleNewGist}\n      >\n        create new\n      </span>\n    );\n\n    return (\n      <div className=\"gistSelection\">\n        <span>Choose gist with graph:</span>\n        {gistElems}\n      </div>\n    );\n  }\n\n  handleSelect = (gistId) => {\n    this.props.projectStore.loadProject(gistId);\n  }\n\n  handleNewGist = () => {\n    this.props.projectStore.newProject();\n  }\n}\n\nexport { GistSelection }\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport './App.css';\nimport GraphView from './GraphView';\nimport { GraphEditPanel } from './GraphEditPanel';\nimport SaveInterface from './SaveInterface';\nimport { GistSelection } from './gistSelection';\n\n@inject('projectStore')\n@observer\nclass App extends Component {\n  render() {\n    const { changeStamp, graphData, isLoaded } = (this.props as any).projectStore;\n    let content;\n    if (!graphData) {\n      content = <GistSelection />;\n    } else {\n      content = (\n        <>\n          <GraphView changeStamp={changeStamp} />\n          <GraphEditPanel />\n          <SaveInterface />\n        </>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        {content}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { ProjectStore } from './ProjectStore';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst projectStore = new ProjectStore();\nconst stores = {\n  projectStore,\n};\n\n// For easier debugging\nif (process.env.NODE_ENV !== 'production') {\n  (window as any)._____APP_STATE_____ = stores;\n}\n\nReactDOM.render(\n  <Provider { ...stores }>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}